//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DictionaryClient.AdminReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Word", Namespace="http://schemas.datacontract.org/2004/07/Dictionary_Web_Service")]
    [System.SerializableAttribute()]
    public partial class Word : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdjectiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AntonymField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExampleSentenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeaningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PluralField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PronunciationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SynonymField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WordIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adjective {
            get {
                return this.AdjectiveField;
            }
            set {
                if ((object.ReferenceEquals(this.AdjectiveField, value) != true)) {
                    this.AdjectiveField = value;
                    this.RaisePropertyChanged("Adjective");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Antonym {
            get {
                return this.AntonymField;
            }
            set {
                if ((object.ReferenceEquals(this.AntonymField, value) != true)) {
                    this.AntonymField = value;
                    this.RaisePropertyChanged("Antonym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExampleSentence {
            get {
                return this.ExampleSentenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ExampleSentenceField, value) != true)) {
                    this.ExampleSentenceField = value;
                    this.RaisePropertyChanged("ExampleSentence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Meaning {
            get {
                return this.MeaningField;
            }
            set {
                if ((object.ReferenceEquals(this.MeaningField, value) != true)) {
                    this.MeaningField = value;
                    this.RaisePropertyChanged("Meaning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Plural {
            get {
                return this.PluralField;
            }
            set {
                if ((object.ReferenceEquals(this.PluralField, value) != true)) {
                    this.PluralField = value;
                    this.RaisePropertyChanged("Plural");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pronunciation {
            get {
                return this.PronunciationField;
            }
            set {
                if ((object.ReferenceEquals(this.PronunciationField, value) != true)) {
                    this.PronunciationField = value;
                    this.RaisePropertyChanged("Pronunciation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Synonym {
            get {
                return this.SynonymField;
            }
            set {
                if ((object.ReferenceEquals(this.SynonymField, value) != true)) {
                    this.SynonymField = value;
                    this.RaisePropertyChanged("Synonym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WordId {
            get {
                return this.WordIdField;
            }
            set {
                if ((this.WordIdField.Equals(value) != true)) {
                    this.WordIdField = value;
                    this.RaisePropertyChanged("WordId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminReference.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddWord", ReplyAction="http://tempuri.org/IAdminService/AddWordResponse")]
        string AddWord(DictionaryClient.AdminReference.Word w);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddWord", ReplyAction="http://tempuri.org/IAdminService/AddWordResponse")]
        System.Threading.Tasks.Task<string> AddWordAsync(DictionaryClient.AdminReference.Word w);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditWord", ReplyAction="http://tempuri.org/IAdminService/EditWordResponse")]
        string EditWord(DictionaryClient.AdminReference.Word w);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditWord", ReplyAction="http://tempuri.org/IAdminService/EditWordResponse")]
        System.Threading.Tasks.Task<string> EditWordAsync(DictionaryClient.AdminReference.Word w);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetWord", ReplyAction="http://tempuri.org/IAdminService/GetWordResponse")]
        DictionaryClient.AdminReference.Word GetWord(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetWord", ReplyAction="http://tempuri.org/IAdminService/GetWordResponse")]
        System.Threading.Tasks.Task<DictionaryClient.AdminReference.Word> GetWordAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteWord", ReplyAction="http://tempuri.org/IAdminService/DeleteWordResponse")]
        string DeleteWord(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteWord", ReplyAction="http://tempuri.org/IAdminService/DeleteWordResponse")]
        System.Threading.Tasks.Task<string> DeleteWordAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ShowAllWords", ReplyAction="http://tempuri.org/IAdminService/ShowAllWordsResponse")]
        DictionaryClient.AdminReference.Word[] ShowAllWords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ShowAllWords", ReplyAction="http://tempuri.org/IAdminService/ShowAllWordsResponse")]
        System.Threading.Tasks.Task<DictionaryClient.AdminReference.Word[]> ShowAllWordsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : DictionaryClient.AdminReference.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<DictionaryClient.AdminReference.IAdminService>, DictionaryClient.AdminReference.IAdminService {
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddWord(DictionaryClient.AdminReference.Word w) {
            return base.Channel.AddWord(w);
        }
        
        public System.Threading.Tasks.Task<string> AddWordAsync(DictionaryClient.AdminReference.Word w) {
            return base.Channel.AddWordAsync(w);
        }
        
        public string EditWord(DictionaryClient.AdminReference.Word w) {
            return base.Channel.EditWord(w);
        }
        
        public System.Threading.Tasks.Task<string> EditWordAsync(DictionaryClient.AdminReference.Word w) {
            return base.Channel.EditWordAsync(w);
        }
        
        public DictionaryClient.AdminReference.Word GetWord(int id) {
            return base.Channel.GetWord(id);
        }
        
        public System.Threading.Tasks.Task<DictionaryClient.AdminReference.Word> GetWordAsync(int id) {
            return base.Channel.GetWordAsync(id);
        }
        
        public string DeleteWord(int id) {
            return base.Channel.DeleteWord(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteWordAsync(int id) {
            return base.Channel.DeleteWordAsync(id);
        }
        
        public DictionaryClient.AdminReference.Word[] ShowAllWords() {
            return base.Channel.ShowAllWords();
        }
        
        public System.Threading.Tasks.Task<DictionaryClient.AdminReference.Word[]> ShowAllWordsAsync() {
            return base.Channel.ShowAllWordsAsync();
        }
    }
}
